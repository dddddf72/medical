# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ViewSelfcheck.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import chardet
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QHBoxLayout, QVBoxLayout, QAbstractItemView, \
    QAbstractSlider

from Utils.Path import rootPath
from Utils.ResolutionTools import setDesktop, scaleSizeW, scaleSizeH

# 图片所在路径
imgPath = rootPath + "/View/img"

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setStyleSheet("QMainWindow#MainWindow{border-image: url(" + imgPath + "/referent/bg.png);}")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # 顶部设置按钮
        # self.button_setting = QtWidgets.QPushButton(self.centralwidget)
        # self.button_setting.setObjectName("button_setting")
        # self.button_setting.setGeometry(QtCore.QRect(scaleSizeW(1034), scaleSizeH(27), scaleSizeW(66), scaleSizeH(26)))
        # self.button_setting.setStyleSheet(
        #     "QPushButton#button_setting{"
        #     "border-image: url(" + imgPath + "/referent/切图_03.png);}")

        # 顶部关机按钮
        self.button_shut = QtWidgets.QPushButton(self.centralwidget)
        self.button_shut.setObjectName("button_shut")
        self.button_shut.setGeometry(QtCore.QRect(scaleSizeW(1034), scaleSizeH(30), scaleSizeW(66), scaleSizeH(26)))
        self.button_shut.setStyleSheet(
            "QPushButton#button_shut{"
            "border-image: url(" + imgPath + "/common/shut.png);}")

        # 顶部帮助按钮
        self.button_help = QtWidgets.QPushButton(self.centralwidget)
        self.button_help.setObjectName("button_help")
        self.button_help.setGeometry(QtCore.QRect(scaleSizeW(1150), scaleSizeH(27), scaleSizeW(66), scaleSizeH(26)))
        self.button_help.setStyleSheet(
            "QPushButton#button_help{"
            "border-image: url(" + imgPath + "/referent/切图_03.png);}")

        # 底部警告
        self.label_warn = QtWidgets.QLabel(self.centralwidget)
        self.label_warn.setObjectName("label_warn")
        self.label_warn.setGeometry(QtCore.QRect(scaleSizeW(63), scaleSizeH(666), scaleSizeW(1000), scaleSizeH(28)))
        self.label_warn.setStyleSheet(self.label_warn_style("180,180,180"))
        self.label_warn.setFont(QFont('Arial', scaleSizeW(13)))
        self.label_warn.setText("请注意，请在甲状腺上取值")

        # 激光状态
        self.label_light_switch = QtWidgets.QLabel(self.centralwidget)
        self.label_light_switch.setScaledContents(True)
        self.label_light_switch.setPixmap(QPixmap(imgPath + "/common/light_switch_false.png"))
        self.label_light_switch.setGeometry(QtCore.QRect(scaleSizeW(501), scaleSizeH(113), scaleSizeW(190), scaleSizeH(50)))
        self.label_light_switch.setObjectName("label_light_switch")

        # 后门按钮
        self.back_door_btn = QtWidgets.QPushButton(self.centralwidget)
        self.back_door_btn.setGeometry(QtCore.QRect(scaleSizeW(501), scaleSizeH(113), scaleSizeW(190), scaleSizeH(50)))
        self.back_door_btn.setObjectName("back_door_btn")
        # 设置按钮透明
        op = QtWidgets.QGraphicsOpacityEffect()
        op.setOpacity(0)
        self.back_door_btn.setGraphicsEffect(op)
        self.back_door_btn.setAutoFillBackground(True)

        # 测得基准值
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setScaledContents(True)
        self.label_6.setPixmap(QPixmap(imgPath + "/referent/切图_18.png"))
        self.label_6.setGeometry(QtCore.QRect(scaleSizeW(470), scaleSizeH(187), scaleSizeW(242), scaleSizeH(302)))
        self.label_6.setObjectName("label_6")

        layout_label_6 = QHBoxLayout(self.label_6)
        layout_label_6.setContentsMargins(scaleSizeW(10), scaleSizeH(110), scaleSizeW(10), scaleSizeH(120))

        self.label_6_1 = QtWidgets.QLabel(self.label_6)
        self.label_6_1.setObjectName("label_6_1")

        self.label_6_2 = QtWidgets.QLabel(self.label_6)
        self.label_6_2.setObjectName("label_6_2")

        self.label_6_3 = QtWidgets.QLabel(self.label_6)
        self.label_6_3.setObjectName("label_6_3")

        self.label_6_4 = QtWidgets.QLabel(self.label_6)
        self.label_6_4.setObjectName("label_6_4")

        self.label_6_5 = QtWidgets.QLabel(self.label_6)
        self.label_6_5.setObjectName("label_6_5")

        self.label_6_6 = QtWidgets.QLabel(self.label_6)
        self.label_6_6.setObjectName("label_6_6")

        layout_label_6.addWidget(self.label_6_1)
        layout_label_6.addWidget(self.label_6_2)
        layout_label_6.addWidget(self.label_6_3)
        layout_label_6.addWidget(self.label_6_4)
        layout_label_6.addWidget(self.label_6_5)
        layout_label_6.addWidget(self.label_6_6)

        # 基准值取样部位-文字
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setPixmap(QPixmap(imgPath + "/referent/切图_10-16.png"))
        self.label_7.setGeometry(QtCore.QRect(scaleSizeW(742), scaleSizeH(108), scaleSizeW(130), scaleSizeH(20)))
        self.label_7.setObjectName("label_7")

        # 基准值取样部位-图片
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(scaleSizeW(753), scaleSizeH(157), scaleSizeW(421), scaleSizeH(447)))
        self.label_8.setPixmap(QPixmap(imgPath + "/referent/切图_17.png"))
        self.label_8.setObjectName("label_8")

        # 测量值QListWidget
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setObjectName("listWidget")
        # 去掉边框
        self.listWidget.setFrameShape(QtWidgets.QListWidget.NoFrame)
        # 背景透明
        self.listWidget.setStyleSheet("QListWidget#listWidget{background-color: transparent;}")
        # 位置
        self.listWidget.setGeometry(QtCore.QRect(scaleSizeW(109), scaleSizeH(113), scaleSizeW(333), scaleSizeH(520)))
        # item间距
        self.listWidget.setSpacing(scaleSizeH(4))
        # 去掉滚动条
        self.listWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.listWidget.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        # 设置滚动模式
        self.listWidget.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)
        # 每次滚动的距离
        self.listWidget.verticalScrollBar().setSingleStep(scaleSizeH(5))

        # 自定义滚动条
        self.scrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollBar.setObjectName("scrollBar")
        # 位置
        self.scrollBar.setGeometry(QtCore.QRect(scaleSizeW(80), scaleSizeH(230), scaleSizeW(10), scaleSizeH(280)))
        # 配置滚动条样式
        self.__vertical_slider_min_height = int(scaleSizeH(280) * 0.7)
        self.scrollBar.setStyleSheet(self.get_scroll_bar_qss(self.__vertical_slider_min_height))
        # 绑定原滚动条
        self.listWidget.verticalScrollBar().valueChanged.connect(self.scrollBar.setValue)
        self.scrollBar.valueChanged.connect(self.listWidget.verticalScrollBar().setValue)
        self.listWidget.verticalScrollBar().rangeChanged.connect(self.vertical_scroll_range_changed)
        self.scrollBar.setRange(self.listWidget.verticalScrollBar().minimum(), self.listWidget.verticalScrollBar().maximum())

        # 底部可滚动提示
        self.label_scroll_tip = QtWidgets.QLabel(self.centralwidget)
        self.label_scroll_tip.setGeometry(QtCore.QRect(scaleSizeW(300), scaleSizeH(615), scaleSizeW(38), scaleSizeH(40)))
        self.label_scroll_tip.setPixmap(QPixmap(imgPath + "/referent/scroll_tip.png"))
        self.label_scroll_tip.setObjectName("label_scroll_tip")

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 周期性滚动，确保新增内容在最下方，且有良好的滚动效果，当到达最后时将停止滚动
        self._scrollTimer = QtCore.QTimer()
        self._scrollTimer.setInterval(15)
        self._scrollTimer.timeout.connect(self.scroll_step_add)
        self._scrollTimer.start()
        # 默认不显示
        self._scroll_bar_show(False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    # 设置基准值,此方法不做校验,格式为:23456
    def formatFinalValue(self, text):
        self.label_6_1.setStyleSheet(self.getLabelStyleSheet(text[0]))
        self.label_6_2.setStyleSheet(self.getLabelStyleSheet(text[1]))
        self.label_6_3.setStyleSheet(self.getLabelStyleSheet("10"))  # 逗号
        self.label_6_4.setStyleSheet(self.getLabelStyleSheet(text[2]))
        self.label_6_5.setStyleSheet(self.getLabelStyleSheet(text[3]))
        self.label_6_6.setStyleSheet(self.getLabelStyleSheet(text[4]))

    def getLabelStyleSheet(self, text):
        return "border-image: url(" + imgPath + "/referent/数字_" + text + ".png);"

    def updateValue(self, limit=5):
        # 测试数据
        for index in range(limit):
            self._add_item(index + 1, "")

    def _add_item(self, label, text):
        """
        新增项
        :param label: int 当前项标签，第几个
        :param text: 内容
        :return: widget
        """
        item = QtWidgets.QListWidgetItem(self.listWidget)
        item.setSizeHint(QSize(scaleSizeW(266), scaleSizeH(96)))
        widget = ItemWidget(text, label, item, self.listWidget)
        self.listWidget.setItemWidget(item, widget)
        return widget

    def scroll_step_add(self):
        """
        逐步滚动
        """
        self.listWidget.verticalScrollBar().triggerAction(QAbstractSlider.SliderSingleStepAdd)
        # 已到末尾
        if self.scrollBar.value() >= self.scrollBar.maximum():
            self._scrollTimer.stop()

    def label_warn_style(self, rgb):
        """
        警告的格式
        :param rgb: 颜色，字符串：180,180,180
        :return:
        """
        return ("QLabel#label_warn{"
            "background-image: url(" + imgPath + "/referent/切图_42.png); "
            "background-repeat: no-repeat; "
            "background-position: center left;"
            "color: rgb(" + rgb + ");"
            "padding: 0px 30px}")

    def get_scroll_bar_qss(self, vertical_slider_min_height):
        """
        获取滚动条配置
        :param vertical_slider_min_height: 滚动条的最小高度
        """
        if vertical_slider_min_height < 62:
            vertical_slider_min_height = 62
        with open(rootPath + "/View/release/referent/ScrollBar.qss", "rb") as fp:
            content = fp.read()
            encoding = chardet.detect(content) or {}
            content = content.decode(encoding.get("encoding") or "utf-8")
        content += """\nQScrollBar::handle:vertical {
                        background: rgb(79, 135, 255);
                        width: 10px;
                        min-height: """ + str(vertical_slider_min_height) + """px;
                        border-radius: 5px;
                        border: none;
                    }"""
        return content

    def vertical_scroll_range_changed(self, min, max):
        # 修改自定义滚动的范围
        self.scrollBar.setRange(min, max)
        # 修改滚轮最小高度
        if self.__vertical_slider_min_height > 62:
            self.__vertical_slider_min_height -= 5
            self.scrollBar.setStyleSheet(self.get_scroll_bar_qss(self.__vertical_slider_min_height))

    def _scroll_bar_show(self, show_enable):
        """
        滚动条显示与否
        """
        print("_scroll_bar_show", show_enable)
        if show_enable:
            self.scrollBar.show()
            self.label_scroll_tip.show()
        else:
            self.scrollBar.hide()
            self.label_scroll_tip.hide()


# 子item控件
class ItemWidget(QWidget):

    def __init__(self, text, index, item, *args, **kwargs):
        super(ItemWidget, self).__init__(*args, **kwargs)
        self._item = item  # 保留list item的对象引用
        self.__label = None

        text = self.formatItemValue(text)

        layout = QHBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)

        # 左边面板
        label_left = QtWidgets.QLabel()
        label_left.setObjectName('label_left')

        layout_left = QVBoxLayout(label_left)
        layout_left.setContentsMargins(0, 0, 0, 0)

        # 圆球
        label_left_top = QtWidgets.QLabel()
        label_left_top.setObjectName('label_left_top')
        label_left_top.setStyleSheet(
            "QLabel#label_left_top{"
            "background-image: url(" + imgPath + "/referent/切图_19.png); "
            "background-repeat: no-repeat; "
            "background-position: center bottom;}")

        # 文字
        label_left_bottom = QtWidgets.QLabel()
        label_left_bottom.setObjectName('label_left_bottom')
        label_left_bottom.setStyleSheet("QLabel#label_left_bottom{color: rgb(0,220,245);}")
        label_left_bottom.setText('测量值' + str(index))
        label_left_bottom.setAlignment(Qt.AlignHCenter | Qt.AlignTop)

        # 左边面板加入控件
        layout_left.addWidget(label_left_top)
        layout_left.addWidget(label_left_bottom)
        layout_left.setStretch(0, 2)
        layout_left.setStretch(1, 1)

        # 右边面板
        label = QtWidgets.QLabel()
        label.setObjectName('label')
        label.setStyleSheet("QLabel#label{"
                            "border-image: url(" + imgPath + "/referent/取值_1.png);"
                            "color: rgb(190,200,210)}")
        font = QFont('Arial', scaleSizeW(30))
        label.setFont(font)
        label.setText(text)
        self.__label = label

        # 右边面板加入控件
        layout.addWidget(label_left)
        layout.addWidget(label)
        layout.setStretch(0, 1)
        layout.setStretch(1, 4)

    def doDeleteItem(self):
        self.itemDeleted.emit(self._item)

    def update_label(self, text):
        self.__label.setText(self.formatItemValue(text))

    @property
    def item(self):
        return self._item

    # 格式化测量值,此方法有点偷懒,效果不是很好
    def formatItemValue(self, text):
        if text == '':
            return ''
        else:
            return '  ' + text[0] + '  ' + text[1] + '   ' + text[2] + '  ' + text[3] + '  ' + text[4]


class MyWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.setupUi(self)
        self.count = 6
        # 测试数据
        self.__widgetList = []
        for index in range(self.count):
            self.__widgetList.append(self._add_item(index + 1, str(index) + "0000"))
        # 设置基准值
        self.formatFinalValue("89563")
        # 后门按钮测试
        self.back_door_btn.clicked.connect(self.__back_door_btn_click)

    def __back_door_btn_click(self):
        # 模拟新增
        self.__widgetList[self.count - 1].update_label(str(self.count) + "0000")
        self.count += 1
        self.__widgetList.append(self._add_item(self.count, ""))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    desktop = QApplication.desktop()
    print("屏幕宽:" + str(desktop.width()))
    print("屏幕高:" + str(desktop.height()))
    setDesktop(desktop)

    app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    myWin = MyWindow()

    myWin.showFullScreen()
    sys.exit(app.exec_())
